% Auto-generated by cameraCalibrator app on 18-May-2020
%-------------------------------------------------------


% Define images to process
imageFileNames = {'C:\Users\Giaco\Downloads\Telegram Desktop\Archivio\Foto del 18-05-20 alle 17.51 #2.jpg',...
    'C:\Users\Giaco\Downloads\Telegram Desktop\Archivio\Foto del 18-05-20 alle 17.51 #8.jpg',...
    'C:\Users\Giaco\Downloads\Telegram Desktop\Archivio\Foto del 18-05-20 alle 17.51 #9.jpg',...
    'C:\Users\Giaco\Downloads\Telegram Desktop\Archivio\Foto del 18-05-20 alle 17.52 #2.jpg',...
    'C:\Users\Giaco\Downloads\Telegram Desktop\Archivio\Foto del 18-05-20 alle 17.52 #4.jpg',...
    'C:\Users\Giaco\Downloads\Telegram Desktop\Archivio\Foto del 18-05-20 alle 17.52 #5.jpg',...
    'C:\Users\Giaco\Downloads\Telegram Desktop\Archivio\Foto del 18-05-20 alle 17.54 #2.jpg',...
    'C:\Users\Giaco\Downloads\Telegram Desktop\Archivio\Foto del 18-05-20 alle 17.54 #3.jpg',...
    'C:\Users\Giaco\Downloads\Telegram Desktop\Archivio\Foto del 18-05-20 alle 17.54.jpg',...
    'C:\Users\Giaco\Downloads\Telegram Desktop\Archivio\Foto del 18-05-20 alle 17.55 #2.jpg',...
    'C:\Users\Giaco\Downloads\Telegram Desktop\Archivio\Foto del 18-05-20 alle 17.55.jpg',...
    'C:\Users\Giaco\Downloads\Telegram Desktop\Archivio\Foto del 18-05-20 alle 17.56 #2.jpg',...
    'C:\Users\Giaco\Downloads\Telegram Desktop\Archivio\Foto del 18-05-20 alle 17.51 #3.jpg',...
    'C:\Users\Giaco\Downloads\Telegram Desktop\Archivio\Foto del 18-05-20 alle 17.51 #5.jpg',...
    'C:\Users\Giaco\Downloads\Telegram Desktop\Archivio\Foto del 18-05-20 alle 17.51 #6.jpg',...
    };
% Detect checkerboards in images
[imagePoints, boardSize, imagesUsed] = detectCheckerboardPoints(imageFileNames);
imageFileNames = imageFileNames(imagesUsed);
k = 3
% Read the first image to obtain image size
originalImage = imread(imageFileNames{k});
[mrows, ncols, ~] = size(originalImage);

% Generate world coordinates of the corners of the squares
squareSize = 25;  % in units of 'millimeters'
worldPoints = generateCheckerboardPoints(boardSize, squareSize);

% Calibrate the camera
[cameraParams, imagesUsed, estimationErrors] = estimateCameraParameters(imagePoints, worldPoints, ...
    'EstimateSkew', false, 'EstimateTangentialDistortion', false, ...
    'NumRadialDistortionCoefficients', 2, 'WorldUnits', 'millimeters', ...
    'InitialIntrinsicMatrix', [], 'InitialRadialDistortion', [], ...
    'ImageSize', [mrows, ncols]);

imshow(originalImage,'InitialMagnification',60);
p1 = [imagePoints(5,1,k) imagePoints(5,2,k) 0]
p2 = [imagePoints(6,1, k) imagePoints(6,2, k) 0]
p3 = [imagePoints(12,1, k) imagePoints(12,2, k) 0]
p4 = [imagePoints(11,1, k) imagePoints(11,2, k) 0]
quad = [p1;p2;p3;p4;p1]
hold on
plot(quad(:,1),quad(:,2),'r-', 'LineWidth', 2);


[R,t] = extrinsics(imagePoints(:,:,k),worldPoints,cameraParams);
zCoord = zeros(size(worldPoints,1),1);
zCoord = zCoord - squareSize;
worldPoints = [worldPoints zCoord];
projectedPoints = worldToImage(cameraParams.Intrinsics,R,t,worldPoints);
cameraP1 = [projectedPoints(5,1) projectedPoints(5,2) -squareSize]
cameraP2 = [projectedPoints(6,1) projectedPoints(6,2) -squareSize]
cameraP3 = [projectedPoints(12,1) projectedPoints(12,2) -squareSize]
cameraP4 = [projectedPoints(11,1) projectedPoints(11,2) -squareSize]
quad2 = [cameraP1;cameraP2;cameraP3;cameraP4;cameraP1]

plot([p1(1,1) cameraP1(1,1)], [p1(1,2) cameraP1(1,2)], 'b-', 'LineWidth', 2)
plot([p2(1,1) cameraP2(1,1)], [p2(1,2) cameraP2(1,2)], 'b-', 'LineWidth', 2)
plot([p3(1,1) cameraP3(1,1)], [p3(1,2) cameraP3(1,2)], 'b-', 'LineWidth', 2)
plot([p4(1,1) cameraP4(1,1)], [p4(1,2) cameraP4(1,2)], 'b-', 'LineWidth', 2)

plot(quad2(:,1),quad2(:,2),'g-', 'LineWidth', 2);

legend('Projected points');
hold off

